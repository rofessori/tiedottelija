const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');
const fs = require('fs');
const OpenAI = require('openai');

dotenv.config();

const readSecret = (filepath) => fs.readFileSync(filepath, 'utf8').trim();

const openai = new OpenAI({
  apiKey: readSecret(process.env.OPENAI_API_KEY_FILE),
});

const bot = new TelegramBot(readSecret(process.env.TELEGRAM_BOT_TOKEN_FILE), { polling: true });
let TELEGRAM_CHANNEL_ID = readSecret(process.env.TELEGRAM_CHANNEL_ID_FILE);
let MODERATION_CHANNEL_ID = null; // New moderation channel ID

const SUPER_ADMIN = '@kahvirulla';
let operators = [SUPER_ADMIN];
let whitelist = [];
let banlist = [];
let isWhitelistEnabled = false;
let messageBuffer = 0;
let bigBuffer = 0;
let lastMessageTime = 0;
let moderationQueue = [];
let adminMode = {};
let isEnglishMode = false; // New variable for language toggle

// Load moderators from a JSON file
let moderators = [];
try {
  moderators = JSON.parse(fs.readFileSync('moderators.json', 'utf8'));
} catch (error) {
  console.error('Error loading moderators:', error);
  moderators = []; // Initialize as empty array if file doesn't exist or is invalid
}

const generateAnnouncement = async (message, isRework = false) => {
  let prompt = `Olet viestint√§asiantuntija, joka luo ytimekk√§it√§ ja selkeit√§ ilmoituksia opiskelijatapahtumista. Kun saat tekstin, muotoile siit√§ tiivis ja informatiivinen ilmoitus sek√§ suomeksi ett√§ englanniksi alla olevan ohjeen mukaisesti.

### OHJEET

1. **Kirjoita otsikko suomeksi:**
   - Ensimm√§inen otsikko on 50-60 merkki√§ pitk√§ ja sis√§lt√§√§ 3-6 sanaa. Tiivist√§ otsikkoon tapahtuman olennainen asia: mit√§ tapahtuu ja milloin. Kirjoita sulkeisiin otsikon j√§lkeen "(Lyhyt otsikko suomeksi)".

2. **Anna otsikko englanniksi:**
   - Toinen otsikko on tiiviimpi versio ensimm√§isest√§, noin 30-40 merkki√§ pitk√§ ja sis√§lt√§√§ 3-4 sanaa. Kirjoita sulkeisiin otsikon j√§lkeen "(Short headline in English)".

3. **Tee yhteenveto suomeksi:**
   - Lis√§√§ alkuun emoji üá´üáÆ Kirjoita suomenkielinen yhteenveto noin 40-60 sanalla (maksimissaan 400 merkki√§). Tee siit√§ lyhyt ja ytimek√§s, jaa teksti kahteen kappaleeseen. Mainitse mit√§ tapahtuma on, miss√§ ja milloin se tapahtuu, ja muita t√§rkeit√§ yksityiskohtia kuten osallistumistapa. K√§yt√§ selke√§√§ ja yksinkertaista kielt√§.

4. **Tee yhteenveto englanniksi:**
   - Lis√§√§ alkuun emoji üá¨üáß Kirjoita englanninkielinen versio suomalaisesta yhteenvedosta samalla pituudella ja rakenteella. Varmista, ett√§ k√§√§nn√∂s on tarkka ja v√§litt√§√§ saman keskeisen tiedon.

5. **Sis√§llyt√§ t√§rkeit√§ yksityiskohtia:**
   - Jos ilmoituksessa on erityisi√§ ohjeita (esim. "OPM" eli "oma pullo mukaan") tai tarkkoja sijaintoja (kuten kiltahuone), mainitse ne selke√§sti. Varmista, ett√§ konteksti s√§ilyy oikein.

6. **Karsi yurhat uksityiskohdat pois:**
   - J√§t√§ pois liian yksityiskohtaiset tarinat, esimerkit ja nimet, elleiv√§t ne ole v√§ltt√§m√§tt√∂mi√§ tapahtuman ymm√§rt√§miseksi. Keskity vain olennaiseen tietoon.

### Muotoile ilmoitus seuraavasti:

üá´üáÆ [LYHYT OTSIKKO SUOMEKSI]
[Tapahtumatiedot suomeksi, lyhyesti ja informatiivisesti uutisen tapaan. Sis√§llyt√§ t√§rkeimm√§t tiedot tapahtumasta, kuten mit√§ tapahtuu, miss√§, milloin ja mahdolliset ohjeet osallistujille. Lis√§√§ korkeintaan kaksi sopivaa emojia.]

---

üá¨üáß [LYHYT OTSIKKO ENGLANNIKSI]
[Samat tiedot kuin yll√§, mutta englanniksi. K√§yt√§ selke√§√§ ja tiivist√§ kielt√§. Kun viittaat opiskelijaj√§rjest√∂ Hiukkaseen, k√§yt√§ englanninkielist√§ monikkomuotoa "Hiukkanen's" tai omistusmuotoa "Hiukkanen's".]

### Esimerkkej√§ opiskelijatapahtumien viesteist√§ Telegram-tiedotuskanavalla:

Example 1:
üá´üáÆ "Joko wiinihammasta kolottaa? üçáü¶∑ HerkkuWiiniFestareilla kisataan tuttuun tapaan fuksi-, sima-, sek√§ viinisarjoissa! T√§n√§ vuonna iltaa p√§√§see my√∂s jatkamaan Teekkarisaunalle 19-> ü§Ø"  
üá¨üáß "Got a craving for some wine? üçáü¶∑ As usual, HerkkuWiiniFestival will feature competitions in the categories of fresher's wine, mead, and regular wine. This year, you can also continue the evening at the Teekkarisauna from 7 pm -> ü§Ø"

Example 2:
üá´üáÆ "UlkoXQ:lle on en√§√§ vain muutama paikka vapaana nopeimmille! üèÉüèº Jos kuulet Uppsalan kutsun, suuntaa kipin kapin s√§hk√∂postiin ja varmista paikkasi reissuun. Ilmo p√§√§ttyy t√§n√§√§n. üá∏üá™"  
üá¨üáß "There are only a few spots left to SwedenXQ! üèÉüèº If you hear the calling of Uppsala, head to your emails and secure your spot to this trip. The registration ends today. üá∏üá™"

K√§yt√§ seuraavia tietoja luodaksesi ilmoituksen:
${message}

Varmista, ett√§ ilmoitus on ytimek√§s, informatiivinen ja kiinnostava. Jos annetuissa tiedoissa ei ole tarpeeksi informaatiota (esim. puuttuu p√§iv√§m√§√§r√§, aika tai paikka), pyyd√§ lis√§tietoja.`;

  if (isRework) {
    prompt = `Muokkaa seuraavaa ilmoitusta opiskelijaj√§rjest√∂n tapahtumasta. S√§ilyt√§ alkuper√§isen viestin t√§rkeimm√§t tiedot ja rakenne. Tee siit√§ lyhyempi ja ytimekk√§√§mpi:

${message}

Muista, ett√§ t√§m√§ on ILMOITUS opiskelijatapahtumasta. √Ñl√§ lis√§√§ mit√§√§n keksitty√§ tietoa. Jos alkuper√§isess√§ viestiss√§ ei ole tarpeeksi tai se vaikuttaa enemm√§nkin pitk√§lt√§ ajatusten virralta kuin tapahtuman tiedoilta, ilmoita siit√§ erikseen jotta k√§ytt√§j√§ voi antaa lis√§tietoja. Tapahtumailmoituksessa on aina oltava ainakin paikka, aika, p√§iv√§m√§√§r√§ ja mik√§ tapahtuman nimi on. jos ilmoitetaan killan kokouksesta, siin√§ tulisi my√∂s mainita tila, jossa se pidet√§√§n.`;
  }

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 500,
    });

    const response = completion.choices[0].message.content.trim();
    if (response.includes("Lis√§tietoja tarvitaan") || response.includes("More information needed")) {
      return { text: response, needsMoreInfo: true };
    }
    return { text: response, needsMoreInfo: false };
  } catch (error) {
    if (error.code === 'insufficient_quota') {
      return { text: `Virhe: OpenAI API:n kiinti√∂ ylitetty. Yrit√§ my√∂hemmin uudelleen tai ota yhteytt√§ yll√§pit√§j√§√§n.\n\nAlkuper√§inen viesti:\n${message}`, needsMoreInfo: false };
    }
    throw error;
  }
};

const isOperator = (username) => operators.includes(username) || username === SUPER_ADMIN;

const isWhitelisted = (username) => !isWhitelistEnabled || whitelist.includes(username) || isOperator(username);

const isBanned = (username) => banlist.includes(username);

const checkPermission = (msg, permission) => {
  const username = msg.from.username;
  if (isBanned(username)) {
    bot.sendMessage(msg.chat.id, isEnglishMode ? "You are banned from using this bot." : "Olet estetty k√§ytt√§m√§st√§ t√§t√§ bottia.");
    return false;
  }
  if (!isWhitelisted(username)) {
    bot.sendMessage(msg.chat.id, isEnglishMode ? "You don't have permission to use this bot." : "Sinulla ei ole oikeutta k√§ytt√§√§ t√§t√§ bottia.");
    return false;
  }
  if (permission === 'operator' && !isOperator(username)) {
    bot.sendMessage(msg.chat.id, isEnglishMode ? "You don't have operator rights to use this command." : "Sinulla ei ole operaattorin oikeuksia k√§ytt√§√§ t√§t√§ komentoa.");
    return false;
  }
  return true;
};

const checkBuffer = (msg) => {
  const now = Date.now();
  const bufferTime = bigBuffer || messageBuffer;
  if (now - lastMessageTime < bufferTime * 60 * 1000) {
    const remainingTime = Math.ceil((bufferTime * 60 * 1000 - (now - lastMessageTime)) / 60000);
    bot.sendMessage(msg.chat.id, isEnglishMode ? `Wait ${remainingTime} minutes before sending a new announcement.` : `Odota ${remainingTime} minuuttia ennen kuin l√§het√§t uuden ilmoituksen.`);
    return false;
  }
  return true;
};

// Default help menu in Finnish with buttons
bot.onText(/\/start/, (msg) => {
  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '/generate', callback_data: 'generate' }, { text: '/announce', callback_data: 'announce' }, { text: '/help', callback_data: 'help' }]
      ]
    }
  };
  bot.sendMessage(msg.chat.id, isEnglishMode ? "Welcome to the Announcement Bot! Type /help to see available commands." : "Tervetuloa Ilmoitusbottiin! Kirjoita /help n√§hd√§ksesi k√§ytett√§viss√§ olevat komennot.", options);
});

bot.onText(/\/help/, (msg) => {
  const helpText = isEnglishMode ? `
Available commands:
/start - Start the bot
/help - Show this help message
/announce - Submit a ready-made announcement for review
/generate <description> - Create an announcement using GPT-3
/sourcecode - Show link to bot's source code
  ` : `
K√§ytett√§viss√§ olevat komennot:
/start - K√§ynnist√§ botti
/help - N√§yt√§ t√§m√§ ohjeviesti
/announce - L√§het√§ valmis ilmoitus tarkastettavaksi
/generate <kuvaus> - Luo ilmoitus GPT-3:n avulla
/sourcecode - N√§yt√§ linkki botin l√§hdekoodiin
  `;
  bot.sendMessage(msg.chat.id, helpText);
});

bot.onText(/\/ophelp/, (msg) => {
  if (!checkPermission(msg, 'operator')) return;
  const opHelpText = isEnglishMode ? `
Operator commands:
/setchannel <channel_id> - Set announcement channel
/setmodchannel <channel_id> - Set moderation channel
/operator <username> - Add user as operator
/listoperators - Show list of all operators
/togglewhitelist - Toggle whitelist on/off
/whitelistadd - Add users to whitelist
/whiteliststop - Stop adding users to whitelist
/ban <username> - Ban user
/banlist - Show list of banned users
/queue - Show moderation queue
/buffer <minutes> - Set buffer time for announcements (1-360 minutes)
/bigbuffer <minutes> - Set longer buffer time for announcements (1-360 minutes)
/edit <message_id> <new_text> - Edit message in queue
/shorten <message_id> - Shorten message in queue
/togglelanguage - Toggle between Finnish and English
/listmoderators - List usernames of bot moderators
  ` : `
Operaattorikomennot:
/setchannel <channel_id> - Aseta ilmoituskanava
/setmodchannel <channel_id> - Aseta moderointikanava
/operator <username> - Lis√§√§ k√§ytt√§j√§ operaattoriksi
/listoperators - N√§yt√§ lista kaikista operaattoreista
/togglewhitelist - Vaihda valkolistan k√§ytt√∂ p√§√§lle/pois
/whitelistadd - Lis√§√§ k√§ytt√§ji√§ valkolistalle
/whiteliststop - Lopeta k√§ytt√§jien lis√§√§minen valkolistalle
/ban <username> - Est√§ k√§ytt√§j√§n k√§ytt√∂oikeus
/banlist - N√§yt√§ estettyjen k√§ytt√§jien lista
/queue - N√§yt√§ moderointijono
/buffer <minuutit> - Aseta puskuriaika ilmoituksille (1-360 minuuttia)
/bigbuffer <minuutit> - Aseta pidempi puskuriaika ilmoituksille (1-360 minuuttia)
/edit <message_id> <new_text> - Muokkaa jonossa olevaa ilmoitusta
/shorten <message_id> - Lyhenn√§ jonossa olevaa ilmoitusta
/togglelanguage - Vaihda suomen ja englannin kielen v√§lill√§
/listmoderators - Listaa botin moderaattorien k√§ytt√§j√§nimet
  `;
  bot.sendMessage(msg.chat.id, opHelpText);
});

// Generate command
bot.onText(/\/generate(.*)/, async (msg, match) => {
  if (!checkPermission(msg, 'user') || !checkBuffer(msg)) return;
  const userInput = match[1] ? match[1].trim() : null;

  if (!userInput) {
    bot.sendMessage(msg.chat.id, isEnglishMode ? "Provide an event description to create an announcement:" : "Anna tapahtuman kuvaus luodaksesi ilmoituksen:");
    bot.once('message', async (inputMsg) => {
      await processGenerateCommand(msg, inputMsg.text);
    });
  } else {
    await processGenerateCommand(msg, userInput);
  }
});

const processGenerateCommand = async (msg, userInput) => {
  try {
    const { text: announcement, needsMoreInfo } = await generateAnnouncement(userInput);
    if (needsMoreInfo) {
      bot.sendMessage(msg.chat.id, isEnglishMode ? "More information needed. Please provide:" : "Lis√§tietoja tarvitaan. Ole hyv√§ ja kerro:");
      bot.sendMessage(msg.chat.id, announcement);
      return;
    }
    moderationQueue.push({
      id: msg.message_id,
      from: msg.from.username,
      text: announcement,
      originalInput: userInput,
      status: 'pending',
      type: 'generate'
    });

    bot.sendMessage(msg.chat.id, `${isEnglishMode ? 'Created announcement:' : 'Luotu ilmoitus:'}\n\n${announcement}`);
    bot.sendMessage(msg.chat.id, isEnglishMode ? `Your announcement will be checked and forwarded by the moderators: ${moderators.join(', ')}` : `Ilmoituksesi tarkistetaan ja v√§litet√§√§n moderaattoreiden toimesta: ${moderators.join(', ')}`);
    notifyModerationChannel(`${isEnglishMode ? 'New generated announcement for review:' : 'Uusi luotu ilmoitus tarkistettavana:'}\n\n${announcement}`);
  } catch (error) {
    console.error('Error creating announcement:', error);
    bot.sendMessage(msg.chat.id, isEnglishMode ? "An error occurred while creating the announcement. Please try again later." : "Ilmoituksen luomisessa tapahtui virhe. Yrit√§ my√∂hemmin uudelleen.");
  }
};

// Announce command for submitting ready-made announcements
bot.onText(/\/announce(.*)/, async (msg, match) => {
  if (!checkPermission(msg, 'user')) return;
  const userInput = match[1] ? match[1].trim() : null;

  if (!userInput) {
    bot.sendMessage(msg.chat.id, isEnglishMode ? "Provide the event announcement for review:" : "Anna tapahtuman ilmoitus tarkastettavaksi:");
    bot.once('message', async (inputMsg) => {
      await processAnnounceCommand(msg, inputMsg.text);
    });
  } else {
    await processAnnounceCommand(msg, userInput);
  }
});

const processAnnounceCommand = async (msg, announcement) => {
  moderationQueue.push({
    id: msg.message_id,
    from: msg.from.username,
    text: announcement,
    status: 'pending',
    type: 'announce'
  });

  bot.sendMessage(msg.chat.id, isEnglishMode ? "Your announcement has been sent for review." : "Ilmoituksesi on l√§hetetty tarkastettavaksi.");
  bot.sendMessage(msg.chat.id, isEnglishMode ? `Your announcement will be checked and forwarded by the moderators: ${moderators.join(', ')}` : `Ilmoituksesi tarkistetaan ja v√§litet√§√§n moderaattoreiden toimesta: ${moderators.join(', ')}`);
  notifyModerationChannel(`${isEnglishMode ? 'New announcement for review:' : 'Uusi ilmoitus tarkistettavana:'}\n\n${announcement}`);
};

// Notify moderation channel if set
const notifyModerationChannel = (message) => {
  if (MODERATION_CHANNEL_ID) {
    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üëç', callback_data: 'approve' }, { text: 'üëé', callback_data: 'reject' }],
          [{ text: isEnglishMode ? 'Edit' : 'Muokkaa', callback_data: 'edit' }, 
           { text: isEnglishMode ? 'Regenerate' : 'Uudelleenluo', callback_data: 'regenerate' }, 
           { text: isEnglishMode ? 'Shorten' : 'Lyhenn√§', callback_data: 'shorten' }]
        ]
      }
    };
    bot.sendMessage(MODERATION_CHANNEL_ID, message, options).catch(error => {
      console.error('Error sending message to moderation channel:', error);
      bot.sendMessage(msg.chat.id, isEnglishMode ? 
        "Error: Unable to send message to moderation channel. Please check the channel ID and bot permissions." : 
        "Virhe: Viesti√§ ei voitu l√§hett√§√§ moderointikanavalle. Tarkista kanavan ID ja botin oikeudet.");
    });
  } else {
    console.error('Moderation channel ID not set');
    bot.sendMessage(msg.chat.id, isEnglishMode ?
      "Error: Moderation channel not set. Please contact an operator to set up the moderation channel." :
      "Virhe: Moderointikanavaa ei ole asetettu. Ota yhteytt√§ operaattoriin moderointikanavan asettamiseksi.");
  }
};

// Operator command to set moderation channel
bot.onText(/\/setmodchannel (.+)/, (msg, match) => {
  if (!checkPermission(msg, 'operator')) return;
  MODERATION_CHANNEL_ID = match[1];
  bot.sendMessage(msg.chat.id, isEnglishMode ? `Moderation channel set to: ${MODERATION_CHANNEL_ID}` : `Moderointikanava asetettu: ${MODERATION_CHANNEL_ID}`);
});

bot.onText(/\/setchannel (.+)/, (msg, match) => {
  if (!checkPermission(msg, 'operator')) return;
  TELEGRAM_CHANNEL_ID = match[1];
  bot.sendMessage(msg.chat.id, isEnglishMode ? `Channel set to: ${TELEGRAM_CHANNEL_ID}` : `Kanava asetettu: ${TELEGRAM_CHANNEL_ID}`);
});

bot.onText(/\/listoperators/, (msg) => {
  if (!checkPermission(msg, 'operator')) return;
  const operatorsList = operators.join(', ');
  bot.sendMessage(msg.chat.id, isEnglishMode ? `Operators: ${operatorsList}` : `Operaattorit: ${operatorsList}`);
});

bot.onText(/\/togglewhitelist/, (msg) => {
  if (!checkPermission(msg, 'operator')) return;
  isWhitelistEnabled = !isWhitelistEnabled;
  bot.sendMessage(msg.chat.id, isEnglishMode ? `Whitelist is now ${isWhitelistEnabled ? 'enabled' : 'disabled'}.` : `Valkolista on nyt ${isWhitelistEnabled ? 'k√§yt√∂ss√§' : 'pois k√§yt√∂st√§'}.`);
});

bot.onText(/\/whitelistadd/, (msg) => {
  if (!checkPermission(msg, 'operator')) return;
  adminMode[msg.from.username] = 'whitelist';
  bot.sendMessage(msg.chat.id, isEnglishMode ? "Send usernames to add to the whitelist. Type /whiteliststop when finished." : "L√§het√§ k√§ytt√§jien k√§ytt√§j√§nimet lis√§t√§ksesi valkolistalle. Kirjoita /whiteliststop kun valmis.");
});

bot.onText(/\/whiteliststop/, (msg) => {
  if (!checkPermission(msg, 'operator')) return;
  if (adminMode[msg.from.username] === 'whitelist') {
    delete adminMode[msg.from.username];
    bot.sendMessage(msg.chat.id, isEnglishMode ? "Finished adding users to the whitelist." : "K√§ytt√§jien lis√§√§minen valkolistalle lopetettu.");
  }
});

bot.onText(/\/ban (.+)/, (msg, match) => {
  if (!checkPermission(msg, 'operator')) return;
  const userToBan = match[1];
  if (!banlist.includes(userToBan)) {
    banlist.push(userToBan);
    bot.sendMessage(msg.chat.id, isEnglishMode ? `${userToBan} has been banned from using the bot.` : `${userToBan} on estetty k√§ytt√§m√§st√§ bottia.`);
  } else {
    bot.sendMessage(msg.chat.id, isEnglishMode ? `${userToBan} is already banned.` : `${userToBan} on jo estetty.`);
  }
});

bot.onText(/\/banlist/, (msg) => {
  if (!checkPermission(msg, 'operator')) return;
  const banlistText = banlist.length > 0 ? banlist.join(', ') : isEnglishMode ? "No banned users." : "Ei estettyj√§ k√§ytt√§ji√§.";
  bot.sendMessage(msg.chat.id, isEnglishMode ? `Banned users: ${banlistText}` : `Estetyt k√§ytt√§j√§t: ${banlistText}`);
});

bot.onText(/\/sourcecode/, (msg) => {
  bot.sendMessage(msg.chat.id, isEnglishMode ? "The source code can be found here: https://github.com/rofessori/tiedottelija" : "L√§hdekoodi l√∂ytyy t√§√§lt√§: https://github.com/rofessori/tiedottelija");
});

bot.onText(/\/queue/, (msg) => {
  if (!checkPermission(msg, 'operator')) return;
  moderationQueue.forEach((item, index) => {
    bot.sendMessage(msg.chat.id, isEnglishMode ? 
      `${index + 1}. Sender: ${item.from}, Status: ${item.status}, Type: ${item.type}\nMessage: ${item.text}` :
      `${index + 1}. L√§hett√§j√§: ${item.from}, Tila: ${item.status}, Tyyppi: ${item.type}\nViesti: ${item.text}`
    );
  });
});

bot.onText(/\/buffer (\d+)/, (msg, match) => {
  if (!checkPermission(msg, 'operator')) return;
  const minutes = parseInt(match[1]);
  if (minutes >= 1 && minutes <= 360) {
    messageBuffer = minutes;
    bigBuffer = 0;
    bot.sendMessage(msg.chat.id, isEnglishMode ? `Buffer time set to ${minutes} minutes.` : `Puskuriaika asetettu ${minutes} minuutiksi.`);
  } else {
    bot.sendMessage(msg.chat.id, isEnglishMode ? "Set buffer time between 1-360 minutes." : "M√§√§rit√§ puskuriaika v√§lill√§ 1-360 minuuttia.");
  }
});

bot.onText(/\/bigbuffer (\d+)/, (msg, match) => {
  if (!checkPermission(msg, 'operator')) return;
  const minutes = parseInt(match[1]);
  if (minutes >= 1 && minutes <= 360) {
    bigBuffer = minutes;
    messageBuffer = 0;
    bot.sendMessage(msg.chat.id, isEnglishMode ? `Long buffer time set to ${minutes} minutes.` : `Pitk√§ puskuriaika asetettu ${minutes} minuutiksi.`);
  } else {
    bot.sendMessage(msg.chat.id, isEnglishMode ? "Set longer buffer time between 1-360 minutes." : "M√§√§rit√§ pidempi puskuriaika v√§lill√§ 1-360 minuuttia.");
  }
});

bot.onText(/\/edit (\d+) (.+)/, (msg, match) => {
  if (!checkPermission(msg, 'operator')) return;
  const messageId = parseInt(match[1]);
  const newText = match[2];
  const queueItem = moderationQueue.find(item => item.id === messageId);
  if (queueItem) {
    queueItem.text = newText;
    bot.sendMessage(msg.chat.id, isEnglishMode ? "Announcement updated in queue." : "Ilmoitus p√§ivitetty jonossa.");
    notifyModerationChannel(isEnglishMode ? `Announcement updated:\n\n${newText}` : `Ilmoitus p√§ivitetty:\n\n${newText}`);
  } else {
    bot.sendMessage(msg.chat.id, isEnglishMode ? "Announcement not found in queue." : "Ilmoitusta ei l√∂ydy jonosta.");
  }
});

bot.onText(/\/shorten (\d+)/, async (msg, match) => {
  if (!checkPermission(msg, 'operator')) return;
  const messageId = parseInt(match[1]);
  const queueItem = moderationQueue.find(item => item.id === messageId);
  if (queueItem) {
    const { text: shortenedText } = await generateAnnouncement(queueItem.text, true);
    queueItem.text = shortenedText;
    bot.sendMessage(msg.chat.id, isEnglishMode ? `Shortened announcement:\n\n${shortenedText}` : `Lyhennetty ilmoitus:\n\n${shortenedText}`);
    notifyModerationChannel(isEnglishMode ? `Announcement shortened:\n\n${shortenedText}` : `Ilmoitus lyhennetty:\n\n${shortenedText}`);
  } else {
    bot.sendMessage(msg.chat.id, isEnglishMode ? "Announcement not found in queue." : "Ilmoitusta ei l√∂ydy jonosta.");
  }
});

// List moderators
bot.onText(/\/listmoderators/, (msg) => {
  if (!checkPermission(msg, 'operator')) return;
  const moderatorsList = moderators.join(', ');
  bot.sendMessage(msg.chat.id, isEnglishMode ? `Bot moderators: ${moderatorsList}` : `Botin moderaattorit: ${moderatorsList}`);
});

// Command to toggle language
bot.onText(/\/togglelanguage/, (msg) => {
  if (!checkPermission(msg, 'operator')) return;
  isEnglishMode = !isEnglishMode;
  bot.sendMessage(msg.chat.id, isEnglishMode ? "Bot is now speaking in English." : "Botti puhuu nyt suomea.");
});

// Handle inline button callbacks
bot.on('callback_query', async (callbackQuery) => {
  const action = callbackQuery.data;
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;

  if (action.startsWith('approve_')) {
    const messageId = parseInt(action.split('_')[1]);
    const queueItem = moderationQueue.find(item => item.id === messageId);
    if (queueItem) {
      queueItem.status = 'approved';
      bot.sendMessage(TELEGRAM_CHANNEL_ID, queueItem.text);
      bot.answerCallbackQuery(callbackQuery.id, { text: isEnglishMode ? "Announcement approved and sent!" : "Ilmoitus hyv√§ksytty ja l√§hetetty!" });
    }
  } else if (action.startsWith('edit_')) {
    const messageId = parseInt(action.split('_')[1]);
    bot.answerCallbackQuery(callbackQuery.id);
    bot.sendMessage(chatId, isEnglishMode ? "Write new text for the announcement:" : "Kirjoita uusi teksti ilmoitukselle:");
    bot.once('message', async (editMsg) => {
      const queueItem = moderationQueue.find(item => item.id === messageId);
      if (queueItem) {
        queueItem.text = editMsg.text;
        bot.sendMessage(chatId, isEnglishMode ? "Announcement updated." : "Ilmoitus p√§ivitetty.");
        notifyModerationChannel(isEnglishMode ? `Updated announcement:\n\n${queueItem.text}` : `P√§ivitetty ilmoitus:\n\n${queueItem.text}`);
      }
    });
  } else if (action === 'approve' || action === 'reject' || action === 'edit' || action === 'regenerate' || action === 'shorten') {
    // Handle moderation actions
    const queueItem = moderationQueue.find(item => item.text === msg.text.split('\n\n')[1]);
    if (queueItem) {
      switch (action) {
        case 'approve':
          queueItem.status = 'approved';
          bot.sendMessage(TELEGRAM_CHANNEL_ID, queueItem.text);
          bot.answerCallbackQuery(callbackQuery.id, { text: isEnglishMode ? "Announcement approved and sent!" : "Ilmoitus hyv√§ksytty ja l√§hetetty!" });
          break;
        case 'reject':
          queueItem.status = 'rejected';
          bot.answerCallbackQuery(callbackQuery.id, { text: isEnglishMode ? "Announcement rejected." : "Ilmoitus hyl√§tty." });
          break;
        case 'edit':
          bot.answerCallbackQuery(callbackQuery.id);
          bot.sendMessage(chatId, isEnglishMode ? "Write new text for the announcement:" : "Kirjoita uusi teksti ilmoitukselle:");
          bot.once('message', async (editMsg) => {
            queueItem.text = editMsg.text;
            bot.sendMessage(chatId, isEnglishMode ? "Announcement updated." : "Ilmoitus p√§ivitetty.");
            notifyModerationChannel(isEnglishMode ? `Updated announcement:\n\n${queueItem.text}` : `P√§ivitetty ilmoitus:\n\n${queueItem.text}`);
          });
          break;
        case 'regenerate':
          bot.answerCallbackQuery(callbackQuery.id);
          const { text: regeneratedText } = await generateAnnouncement(queueItem.originalInput || queueItem.text);
          queueItem.text = regeneratedText;
          bot.sendMessage(chatId, isEnglishMode ? `Regenerated announcement:\n\n${regeneratedText}` : `Uudelleenluotu ilmoitus:\n\n${regeneratedText}`);
          notifyModerationChannel(isEnglishMode ? `Regenerated announcement:\n\n${regeneratedText}` : `Uudelleenluotu ilmoitus:\n\n${regeneratedText}`);
          break;
        case 'shorten':
          bot.answerCallbackQuery(callbackQuery.id);
          const { text: shortenedText } = await generateAnnouncement(queueItem.text, true);
          queueItem.text = shortenedText;
          bot.sendMessage(chatId, isEnglishMode ? `Shortened announcement:\n\n${shortenedText}` : `Lyhennetty ilmoitus:\n\n${shortenedText}`);
          notifyModerationChannel(isEnglishMode ? `Shortened announcement:\n\n${shortenedText}` : `Lyhennetty ilmoitus:\n\n${shortenedText}`);
          break;
      }
    }
  }
});

// New command for admin authentication
bot.onText(/\/sudosu/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;

  adminMode[username] = 'username';
  bot.sendMessage(chatId, isEnglishMode ? "Enter admin username:" : "Sy√∂t√§ yll√§pit√§j√§n k√§ytt√§j√§nimi:");

  bot.once('message', (usernameMsg) => {
    if (usernameMsg.from.username === username && usernameMsg.text === SUPER_ADMIN) {
      adminMode[username] = 'password';
      bot.sendMessage(chatId, isEnglishMode ? "Enter admin password:" : "Sy√∂t√§ yll√§pit√§j√§n salasana:");
      
      bot.once('message', (passwordMsg) => {
        if (passwordMsg.from.username === username && passwordMsg.text === process.env.ADMIN_PASSWORD) {
          if (!operators.includes(username)) {
            operators.push(username);
            fs.writeFileSync('operators.json', JSON.stringify(operators));
          }
          bot.sendMessage(chatId, isEnglishMode ? "Admin mode activated. You are now an operator." : "Yll√§pit√§j√§tila aktivoitu. Olet nyt operaattori.");
        } else {
          bot.sendMessage(chatId, isEnglishMode ? "Invalid password. Admin mode cancelled." : "Virheellinen salasana. Yll√§pit√§j√§tila peruutettu.");
        }
        delete adminMode[username];
      });
    } else {
      bot.sendMessage(chatId, isEnglishMode ? "Invalid username. Admin mode cancelled." : "Virheellinen k√§ytt√§j√§nimi. Yll√§pit√§j√§tila peruutettu.");
      delete adminMode[username];
    }
  });
});

// Error handling for moderation channel messages
bot.on('error', (error) => {
  console.error('Error in bot:', error);
  if (error.code === 'ETELEGRAM' && error.response && error.response.statusCode === 403) {
    console.error('Bot is not a member of the moderation channel or lacks necessary permissions.');
  }
});

// Start the bot
console.log('Bot is running...');